import React, { createContext, useContext, useState, ReactNode, useEffect } from 'react';

interface User {
  id: string;
  name: string;
  email: string;
  phone: string;
}

interface AuthContextType {
  user: User | null;
  login: (email: string, password: string) => Promise<void>;
  register: (userData: { name: string; email: string; phone: string; password: string }) => Promise<void>;
  logout: () => void;
  resetPassword: (email: string) => Promise<void>;
  isAuthenticated: boolean;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

interface AuthProviderProps {
  children: ReactNode;
}

export const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {
  const [user, setUser] = useState<User | null>(() => {
    // Initialize state from localStorage
    const savedUser = localStorage.getItem('giftcraftUser');
    if (savedUser) {
      try {
        return JSON.parse(savedUser);
      } catch (e) {
        console.error('Failed to parse user data from localStorage', e);
        return null;
      }
    }
    return null;
  });

  // Save user to localStorage whenever user state changes
  useEffect(() => {
    if (user) {
      localStorage.setItem('giftcraftUser', JSON.stringify(user));
    } else {
      localStorage.removeItem('giftcraftUser');
    }
  }, [user]);

  const login = async (email: string, password: string) => {
    // Simulate API call - Replace with actual API call
    await new Promise((resolve) => setTimeout(resolve, 1000));
    const loggedInUser: User = {
      id: '1',
      name: 'Test User',
      email,
      phone: '+977 9816315056',
    };
    setUser(loggedInUser);
    // The useEffect will handle saving to localStorage
  };

  const register = async (userData: { name: string; email: string; phone: string; password: string }) => {
    // Simulate API call - Replace with actual API call
    await new Promise((resolve) => setTimeout(resolve, 1000));
    const registeredUser: User = {
      id: '1', // Assuming a new ID is generated by the backend
      name: userData.name,
      email: userData.email,
      phone: userData.phone,
    };
    setUser(registeredUser);
    // The useEffect will handle saving to localStorage
  };

  const logout = () => {
    setUser(null);
    // The useEffect will handle removing from localStorage
  };

  const resetPassword = async (email: string) => {
    // Simulate API call - Replace with actual API call
    await new Promise((resolve) => setTimeout(resolve, 1000));
  };

  return (
    <AuthContext.Provider
      value={{
        user,
        login,
        register,
        logout,
        resetPassword,
        isAuthenticated: !!user,
      }}
    >
      {children}
    </AuthContext.Provider>
  );
}; 